package com.gerken.sofa.bean;

// Begin imports 

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Date;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.gerken.sofa.exception.DataException;

import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

// End imports 

public class AnswerSpec implements Serializable, Comparable<AnswerSpec> {

	private Long _answerId;
	private String _userId;
	private Long _questionId;
	private Integer _userAnswerRep;
	private Integer _userTotalRep;

	public AnswerSpec(Tuple tuple) {
		_answerId = tuple.getLong(0);
		_userId = tuple.getString(1);
		_questionId = tuple.getLong(2);
		_userAnswerRep = tuple.getInteger(3);
		_userTotalRep = tuple.getInteger(4);
	}

	public AnswerSpec() {

	}

	public AnswerSpec(JSONObject json) throws DataException {
		try { json = json.getJSONObject("AnswerSpec"); } 
		catch (Throwable t) {
			throw new DataException("Invalid JSON structure for AnswerSpec constructor");
		}
		if (json.has("answerId")) {
			try { _answerId = json.getLong("answerId"); } catch (Throwable t) {}
		}
		if (json.has("userId")) {
			try { _userId = json.getString("userId"); } catch (Throwable t) {}
		}
		if (json.has("questionId")) {
			try { _questionId = json.getLong("questionId"); } catch (Throwable t) {}
		}
		if (json.has("userAnswerRep")) {
			try { _userAnswerRep = json.getInt("userAnswerRep"); } catch (Throwable t) {}
		}
		if (json.has("userTotalRep")) {
			try { _userTotalRep = json.getInt("userTotalRep"); } catch (Throwable t) {}
		}
	}

	public AnswerSpec(Long _answerId, String _userId, Long _questionId, Integer _userAnswerRep, Integer _userTotalRep) {	
		this._answerId = _answerId;
		this._userId = _userId;
		this._questionId = _questionId;
		this._userAnswerRep = _userAnswerRep;
		this._userTotalRep = _userTotalRep;
	}

	public Values asValues() {
		return new Values(_answerId, _userId, _questionId, _userAnswerRep, _userTotalRep);
	}

	public Long getAnswerId() { 
		return _answerId;
	}
	
	public void setAnswerId(Long value) {
		this._answerId = value;
	}

	public String getUserId() { 
		return _userId;
	}
	
	public void setUserId(String value) {
		this._userId = value;
	}

	public Long getQuestionId() { 
		return _questionId;
	}
	
	public void setQuestionId(Long value) {
		this._questionId = value;
	}

	public Integer getUserAnswerRep() { 
		return _userAnswerRep;
	}
	
	public void setUserAnswerRep(Integer value) {
		this._userAnswerRep = value;
	}

	public Integer getUserTotalRep() { 
		return _userTotalRep;
	}
	
	public void setUserTotalRep(Integer value) {
		this._userTotalRep = value;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {

		if (_answerId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeLong(_answerId);
		}

		if (_userId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userId.length());
			out.write(_userId.getBytes());
		}

		if (_questionId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeLong(_questionId);
		}

		if (_userAnswerRep == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userAnswerRep);
		}

		if (_userTotalRep == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userTotalRep);
		}

	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {

		if (in.readBoolean()) {
			_answerId = in.readLong();
		} else {
			_answerId = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_userId = new String(b);
		} else {
			_userId = null;
		}

		if (in.readBoolean()) {
			_questionId = in.readLong();
		} else {
			_questionId = null;
		}

		if (in.readBoolean()) {
			_userAnswerRep = in.readInt();
		} else {
			_userAnswerRep = null;
		}

		if (in.readBoolean()) {
			_userTotalRep = in.readInt();
		} else {
			_userTotalRep = null;
		}

	}
	
	@Override
	public String toString() {

		StringBuffer sb = new StringBuffer();
		sb.append("AnswerSpec [answerId = " + _answerId + "; userId = " + _userId + "; questionId = " + _questionId + "; userAnswerRep = " + _userAnswerRep + "; userTotalRep = " + _userTotalRep + "]");
		return sb.toString();
		
	}
	
	public JSONObject toJson() throws DataException {
	
		JSONObject json = new JSONObject();

		try { 
 			if (_answerId != null) {
 				json.putOpt("answerId", _answerId);
 			}
 			if (_userId != null) {
 				json.putOpt("userId", _userId);
 			}
 			if (_questionId != null) {
 				json.putOpt("questionId", _questionId);
 			}
 			if (_userAnswerRep != null) {
 				json.putOpt("userAnswerRep", _userAnswerRep);
 			}
 			if (_userTotalRep != null) {
 				json.putOpt("userTotalRep", _userTotalRep);
 			}
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting AnswerSpec to JSON",e);
 		}
 		
 		JSONObject result = new JSONObject();
		try { 		
			result.put("AnswerSpec", json);
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting AnswerSpec to JSON",e);
 		}
		return result;
	}

	public String toJsonString() {
		try {
			return toJson().toString();
		} catch (DataException e) {
			return "{ \"error\":\"+e.toString()+\"}";
		}
	}
	
	@Override
	public int hashCode() {

		// Begin hashCode logic 

		return super.hashCode();

		// End hashCode logic 

	}

	@Override
	public boolean equals(Object obj) {

		// Begin equals logic 

		if (obj instanceof AnswerSpec) {
			AnswerSpec other = (AnswerSpec) obj;
		
		}

		return super.equals(obj);

		// End equals logic 

	}

	public int compareTo(AnswerSpec o) {

		// Begin compare logic 


		// return -1 if this < that
		//         0 if this = that
		//         1 if this > that

		if (o instanceof AnswerSpec) {
			AnswerSpec other = (AnswerSpec) o;
		
		}
	
		return 0;

		// End compare logic 

	}

	public static AnswerSpec sample() {
	
		return new AnswerSpec(1L, "Howdy", 1L, 0, 0);
	
	}

// Begin custom methods 


// End custom methods 
	
}
