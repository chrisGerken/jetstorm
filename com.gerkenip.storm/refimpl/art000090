package com.gerken.sofa.logic;

	// Begin imports 

import com.gerken.sofa.bean.*;
import com.gerken.sofa.bolt.INewQuestionParserBolt;
import com.gerken.sofa.topology.StackoverflowAnalyticsTopology;
import com.gerken.sofa.util.FormatUtil;
import com.gerken.sofa.util.StackoverflowAnalyticsLogger;
import com.gerken.sofa.util.IStackoverflowAnalyticsLogger;
import com.gerkenip.stackoverflow.util.TextCleaner;

import backtype.storm.task.TopologyContext;
import backtype.storm.tuple.Tuple;

import java.io.Serializable;
import java.util.Map;

	// End imports 

public class NewQuestionParserBoltLogic implements Serializable {

	private static final long serialVersionUID = 1L;
		
		// Begin declarations 

    private static final IStackoverflowAnalyticsLogger log = StackoverflowAnalyticsTopology.getLogger();

		// End declarations 
		
    public void readFromNewQuestions(NewQuestion newQuestion, INewQuestionParserBolt bolt) {

			// Begin readFromNewQuestions() logic 

    	String term[] = new TextCleaner().clean(newQuestion.getQuestionText());
    	Long questionId = newQuestion.getQuestionId();
    	int count = 1;
    	String tags = newQuestion.getQuestionTags();
    	String tag[] = FormatUtil.split(tags);
    	String userId = newQuestion.getUserId();
    	for (int i = 0; i < tag.length; i++) {
    		for (int j = 0; j < term.length; j++) {
    	    	NewQuestionTerm newQuestionTerm = new NewQuestionTerm(term[j], tag[i], questionId, count, userId);
    	    	bolt.emitToNewQuestionTermsWithoutAnchor(newQuestionTerm);
    		}
    	}

    	String ownerId = newQuestion.getOwnerId();
    	int ownerRep = newQuestion.getOwnerRep();
    	
    	NewQuestionOpInfo newQuestionOpInfo = new NewQuestionOpInfo(questionId, tags, ownerId, ownerRep, userId);
    	bolt.emitToNewQuestionOpInfosWithoutAnchor(newQuestionOpInfo);
    	
			// End readFromNewQuestions() logic 

    }

    public void prepare(Map conf, TopologyContext context, INewQuestionParserBolt bolt) {

			// Begin prepare() logic 


			// End prepare() logic 

    }

	/*
    *  NOTE: This method is not guaranteed to get called! Do not depend on it!
	*/
    public void cleanup(INewQuestionParserBolt bolt) {

			// Begin cleanup() logic 


			// End cleanup() logic 

    }

// Begin custom methods 


// End custom methods 

}
