package com.gerken.sofa.logic;

	// Begin imports 

import com.gerken.sofa.bean.*;
import com.gerken.sofa.bolt.IQuestionReaderBolt;
import com.gerken.sofa.topology.StackoverflowAnalyticsTopology;
import com.gerken.sofa.util.StackoverflowAnalyticsLogger;
import com.gerken.sofa.util.IStackoverflowAnalyticsLogger;
import com.gerkenip.stackoverflow.model.Question;

import backtype.storm.task.TopologyContext;
import backtype.storm.tuple.Tuple;

import java.io.Serializable;
import java.util.Map;

	// End imports 

public class QuestionReaderBoltLogic implements Serializable {

	private static final long serialVersionUID = 1L;
		
		// Begin declarations 

    private static final IStackoverflowAnalyticsLogger log = StackoverflowAnalyticsTopology.getLogger();

		// End declarations 
		
    public void readFromAnswers(AnswerSpec answerSpec, IQuestionReaderBolt bolt) {

			// Begin readFromAnswers() logic 

    	
    	long questionId = answerSpec.getQuestionId();
    	long answerId = answerSpec.getAnswerId();
    	String userId = answerSpec.getUserId();
    	int answerRep = answerSpec.getUserAnswerRep();
    	
    	Question question = Question.get(questionId);
    	int ownerRep = question.getOwnerReputation();
    	String ownerId = question.getOwnerId();
    	String questionText = question.getBody();
    	String tag[] = question.getTags();
    	String delim = "";
    	String tags = "";
    	for (int i = 0; i < tag.length; i++) {
    		tags = tags + delim + tag[i];
    		delim = "\t";
    	}
    	String questionTags = tags;
    	
    	QuestionSpec spec = new QuestionSpec(questionId, ownerId, ownerRep, questionText, questionTags, answerId, answerRep, userId);
    	
    	bolt.emitToQuestionsWithoutAnchor(spec);
    	
			// End readFromAnswers() logic 

    }

    public void prepare(Map conf, TopologyContext context, IQuestionReaderBolt bolt) {

			// Begin prepare() logic 


			// End prepare() logic 

    }

	/*
    *  NOTE: This method is not guaranteed to get called! Do not depend on it!
	*/
    public void cleanup(IQuestionReaderBolt bolt) {

			// Begin cleanup() logic 


			// End cleanup() logic 

    }

// Begin custom methods 


// End custom methods 

}
