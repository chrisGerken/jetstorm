package com.gerken.sofa.bean;

// Begin imports 

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Date;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.gerken.sofa.exception.DataException;

import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

// End imports 

public class ReputationPrediction implements Serializable, Comparable<ReputationPrediction> {

	private Double _rep;
	private Long _questionId;
	private String _userId;
	private String _metric;

	public ReputationPrediction(Tuple tuple) {
		_rep = tuple.getDouble(0);
		_questionId = tuple.getLong(1);
		_userId = tuple.getString(2);
		_metric = tuple.getString(3);
	}

	public ReputationPrediction() {

	}

	public ReputationPrediction(JSONObject json) throws DataException {
		try { json = json.getJSONObject("ReputationPrediction"); } 
		catch (Throwable t) {
			throw new DataException("Invalid JSON structure for ReputationPrediction constructor");
		}
		if (json.has("rep")) {
			try { _rep = json.getDouble("rep"); } catch (Throwable t) {}
		}
		if (json.has("questionId")) {
			try { _questionId = json.getLong("questionId"); } catch (Throwable t) {}
		}
		if (json.has("userId")) {
			try { _userId = json.getString("userId"); } catch (Throwable t) {}
		}
		if (json.has("metric")) {
			try { _metric = json.getString("metric"); } catch (Throwable t) {}
		}
	}

	public ReputationPrediction(Double _rep, Long _questionId, String _userId, String _metric) {	
		this._rep = _rep;
		this._questionId = _questionId;
		this._userId = _userId;
		this._metric = _metric;
	}

	public Values asValues() {
		return new Values(_rep, _questionId, _userId, _metric);
	}

	public Double getRep() { 
		return _rep;
	}
	
	public void setRep(Double value) {
		this._rep = value;
	}

	public Long getQuestionId() { 
		return _questionId;
	}
	
	public void setQuestionId(Long value) {
		this._questionId = value;
	}

	public String getUserId() { 
		return _userId;
	}
	
	public void setUserId(String value) {
		this._userId = value;
	}

	public String getMetric() { 
		return _metric;
	}
	
	public void setMetric(String value) {
		this._metric = value;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {

		if (_rep == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeDouble(_rep);
		}

		if (_questionId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeLong(_questionId);
		}

		if (_userId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userId.length());
			out.write(_userId.getBytes());
		}

		if (_metric == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_metric.length());
			out.write(_metric.getBytes());
		}

	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {

		if (in.readBoolean()) {
			_rep = in.readDouble();
		} else {
			_rep = null;
		}

		if (in.readBoolean()) {
			_questionId = in.readLong();
		} else {
			_questionId = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_userId = new String(b);
		} else {
			_userId = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_metric = new String(b);
		} else {
			_metric = null;
		}

	}
	
	@Override
	public String toString() {

		StringBuffer sb = new StringBuffer();
		sb.append("ReputationPrediction [rep = " + _rep + "; questionId = " + _questionId + "; userId = " + _userId + "; metric = " + _metric + "]");
		return sb.toString();
		
	}
	
	public JSONObject toJson() throws DataException {
	
		JSONObject json = new JSONObject();

		try { 
 			if (_rep != null) {
 				json.putOpt("rep", _rep);
 			}
 			if (_questionId != null) {
 				json.putOpt("questionId", _questionId);
 			}
 			if (_userId != null) {
 				json.putOpt("userId", _userId);
 			}
 			if (_metric != null) {
 				json.putOpt("metric", _metric);
 			}
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting ReputationPrediction to JSON",e);
 		}
 		
 		JSONObject result = new JSONObject();
		try { 		
			result.put("ReputationPrediction", json);
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting ReputationPrediction to JSON",e);
 		}
		return result;
	}

	public String toJsonString() {
		try {
			return toJson().toString();
		} catch (DataException e) {
			return "{ \"error\":\"+e.toString()+\"}";
		}
	}
	
	@Override
	public int hashCode() {

		// Begin hashCode logic 

		return super.hashCode();

		// End hashCode logic 

	}

	@Override
	public boolean equals(Object obj) {

		// Begin equals logic 

		if (obj instanceof ReputationPrediction) {
			ReputationPrediction other = (ReputationPrediction) obj;
		
		}

		return super.equals(obj);

		// End equals logic 

	}

	public int compareTo(ReputationPrediction o) {

		// Begin compare logic 


		// return -1 if this < that
		//         0 if this = that
		//         1 if this > that

		if (o instanceof ReputationPrediction) {
			ReputationPrediction other = (ReputationPrediction) o;
		
		}
	
		return 0;

		// End compare logic 

	}

	public static ReputationPrediction sample() {
	
		return new ReputationPrediction(3.1415, 1L, "Howdy", "Howdy");
	
	}

// Begin custom methods 


// End custom methods 
	
}
