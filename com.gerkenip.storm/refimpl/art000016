package com.gerken.sofa.bean;

// Begin imports 

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Date;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.gerken.sofa.exception.DataException;

import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

// End imports 

public class OpRepBestFit implements Serializable, Comparable<OpRepBestFit> {

	private String _userId;
	private String _tag;
	private String _coefficients;

	public OpRepBestFit(Tuple tuple) {
		_userId = tuple.getString(0);
		_tag = tuple.getString(1);
		_coefficients = tuple.getString(2);
	}

	public OpRepBestFit() {

	}

	public OpRepBestFit(JSONObject json) throws DataException {
		try { json = json.getJSONObject("OpRepBestFit"); } 
		catch (Throwable t) {
			throw new DataException("Invalid JSON structure for OpRepBestFit constructor");
		}
		if (json.has("userId")) {
			try { _userId = json.getString("userId"); } catch (Throwable t) {}
		}
		if (json.has("tag")) {
			try { _tag = json.getString("tag"); } catch (Throwable t) {}
		}
		if (json.has("coefficients")) {
			try { _coefficients = json.getString("coefficients"); } catch (Throwable t) {}
		}
	}

	public OpRepBestFit(String _userId, String _tag, String _coefficients) {	
		this._userId = _userId;
		this._tag = _tag;
		this._coefficients = _coefficients;
	}

	public Values asValues() {
		return new Values(_userId, _tag, _coefficients);
	}

	public String getUserId() { 
		return _userId;
	}
	
	public void setUserId(String value) {
		this._userId = value;
	}

	public String getTag() { 
		return _tag;
	}
	
	public void setTag(String value) {
		this._tag = value;
	}

	public String getCoefficients() { 
		return _coefficients;
	}
	
	public void setCoefficients(String value) {
		this._coefficients = value;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {

		if (_userId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userId.length());
			out.write(_userId.getBytes());
		}

		if (_tag == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_tag.length());
			out.write(_tag.getBytes());
		}

		if (_coefficients == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_coefficients.length());
			out.write(_coefficients.getBytes());
		}

	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_userId = new String(b);
		} else {
			_userId = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_tag = new String(b);
		} else {
			_tag = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_coefficients = new String(b);
		} else {
			_coefficients = null;
		}

	}
	
	@Override
	public String toString() {

		StringBuffer sb = new StringBuffer();
		sb.append("OpRepBestFit [userId = " + _userId + "; tag = " + _tag + "; coefficients = " + _coefficients + "]");
		return sb.toString();
		
	}
	
	public JSONObject toJson() throws DataException {
	
		JSONObject json = new JSONObject();

		try { 
 			if (_userId != null) {
 				json.putOpt("userId", _userId);
 			}
 			if (_tag != null) {
 				json.putOpt("tag", _tag);
 			}
 			if (_coefficients != null) {
 				json.putOpt("coefficients", _coefficients);
 			}
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting OpRepBestFit to JSON",e);
 		}
 		
 		JSONObject result = new JSONObject();
		try { 		
			result.put("OpRepBestFit", json);
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting OpRepBestFit to JSON",e);
 		}
		return result;
	}

	public String toJsonString() {
		try {
			return toJson().toString();
		} catch (DataException e) {
			return "{ \"error\":\"+e.toString()+\"}";
		}
	}
	
	@Override
	public int hashCode() {

		// Begin hashCode logic 

		return super.hashCode();

		// End hashCode logic 

	}

	@Override
	public boolean equals(Object obj) {

		// Begin equals logic 

		if (obj instanceof OpRepBestFit) {
			OpRepBestFit other = (OpRepBestFit) obj;
		
		}

		return super.equals(obj);

		// End equals logic 

	}

	public int compareTo(OpRepBestFit o) {

		// Begin compare logic 


		// return -1 if this < that
		//         0 if this = that
		//         1 if this > that

		if (o instanceof OpRepBestFit) {
			OpRepBestFit other = (OpRepBestFit) o;
		
		}
	
		return 0;

		// End compare logic 

	}

	public static OpRepBestFit sample() {
	
		return new OpRepBestFit("Howdy", "Howdy", "Howdy");
	
	}

// Begin custom methods 


// End custom methods 
	
}
