package com.gerken.sofa.bean;

// Begin imports 

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Date;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;

import com.gerken.sofa.exception.DataException;

import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

// End imports 

public class EarnedTagInfo implements Serializable, Comparable<EarnedTagInfo> {

	private String _userId;
	private String _tag;
	private Integer _count;

	public EarnedTagInfo(Tuple tuple) {
		_userId = tuple.getString(0);
		_tag = tuple.getString(1);
		_count = tuple.getInteger(2);
	}

	public EarnedTagInfo() {

	}

	public EarnedTagInfo(JSONObject json) throws DataException {
		try { json = json.getJSONObject("EarnedTagInfo"); } 
		catch (Throwable t) {
			throw new DataException("Invalid JSON structure for EarnedTagInfo constructor");
		}
		if (json.has("userId")) {
			try { _userId = json.getString("userId"); } catch (Throwable t) {}
		}
		if (json.has("tag")) {
			try { _tag = json.getString("tag"); } catch (Throwable t) {}
		}
		if (json.has("count")) {
			try { _count = json.getInt("count"); } catch (Throwable t) {}
		}
	}

	public EarnedTagInfo(String _userId, String _tag, Integer _count) {	
		this._userId = _userId;
		this._tag = _tag;
		this._count = _count;
	}

	public Values asValues() {
		return new Values(_userId, _tag, _count);
	}

	public String getUserId() { 
		return _userId;
	}
	
	public void setUserId(String value) {
		this._userId = value;
	}

	public String getTag() { 
		return _tag;
	}
	
	public void setTag(String value) {
		this._tag = value;
	}

	public Integer getCount() { 
		return _count;
	}
	
	public void setCount(Integer value) {
		this._count = value;
	}

	private void writeObject(java.io.ObjectOutputStream out) throws IOException {

		if (_userId == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_userId.length());
			out.write(_userId.getBytes());
		}

		if (_tag == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_tag.length());
			out.write(_tag.getBytes());
		}

		if (_count == null) {
			out.writeBoolean(false);
		} else {
			out.writeBoolean(true);
			out.writeInt(_count);
		}

	}

	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_userId = new String(b);
		} else {
			_userId = null;
		}

		if (in.readBoolean()) {
			byte b[] = new byte[in.readInt()];
			in.read(b);
			_tag = new String(b);
		} else {
			_tag = null;
		}

		if (in.readBoolean()) {
			_count = in.readInt();
		} else {
			_count = null;
		}

	}
	
	@Override
	public String toString() {

		StringBuffer sb = new StringBuffer();
		sb.append("EarnedTagInfo [userId = " + _userId + "; tag = " + _tag + "; count = " + _count + "]");
		return sb.toString();
		
	}
	
	public JSONObject toJson() throws DataException {
	
		JSONObject json = new JSONObject();

		try { 
 			if (_userId != null) {
 				json.putOpt("userId", _userId);
 			}
 			if (_tag != null) {
 				json.putOpt("tag", _tag);
 			}
 			if (_count != null) {
 				json.putOpt("count", _count);
 			}
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting EarnedTagInfo to JSON",e);
 		}
 		
 		JSONObject result = new JSONObject();
		try { 		
			result.put("EarnedTagInfo", json);
 		} catch (JSONException e) {
 			throw new DataException("JSON error when persisting EarnedTagInfo to JSON",e);
 		}
		return result;
	}

	public String toJsonString() {
		try {
			return toJson().toString();
		} catch (DataException e) {
			return "{ \"error\":\"+e.toString()+\"}";
		}
	}
	
	@Override
	public int hashCode() {

		// Begin hashCode logic 

		return super.hashCode();

		// End hashCode logic 

	}

	@Override
	public boolean equals(Object obj) {

		// Begin equals logic 

		if (obj instanceof EarnedTagInfo) {
			EarnedTagInfo other = (EarnedTagInfo) obj;
		
		}

		return super.equals(obj);

		// End equals logic 

	}

	public int compareTo(EarnedTagInfo o) {

		// Begin compare logic 


		// return -1 if this < that
		//         0 if this = that
		//         1 if this > that

		if (o instanceof EarnedTagInfo) {
			EarnedTagInfo other = (EarnedTagInfo) o;
		
		}
	
		return 0;

		// End compare logic 

	}

	public static EarnedTagInfo sample() {
	
		return new EarnedTagInfo("Howdy", "Howdy", 0);
	
	}

// Begin custom methods 


// End custom methods 
	
}
