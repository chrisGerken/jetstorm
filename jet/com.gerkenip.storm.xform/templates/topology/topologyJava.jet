package <c:get select="$topology/@topologyPkg" />;

	<c:userRegion>// Begin imports<c:initialCode>
	
import <c:get select="$topology/@spoutPkg" />.*;
import <c:get select="$topology/@boltPkg" />.*;
import <c:get select="$topology/@utilPkg" />.AlarmClock;
import <c:get select="$topology/@utilPkg" />.<c:get select="$topology/@loggerJava" />;
import <c:get select="$topology/@utilPkg" />.<c:get select="$topology/@iLoggerJava" />;
import <c:get select="$topology/@utilPkg" />.<c:get select="$topology/@taskHookJava" />;

import backtype.storm.Config;
import backtype.storm.ILocalCluster;
import backtype.storm.LocalCluster;
import backtype.storm.StormSubmitter;
import backtype.storm.generated.AlreadyAliveException;
import backtype.storm.generated.InvalidTopologyException;
import backtype.storm.generated.NotAliveException;
import backtype.storm.generated.StormTopology;
import backtype.storm.topology.BoltDeclarer;
import backtype.storm.topology.TopologyBuilder;
import backtype.storm.tuple.Fields;
import backtype.storm.utils.Utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Properties;

	</c:initialCode>// End imports</c:userRegion>
	
public class <c:get select="$topology/@topologyJava" /> {

    static final String DEFAULT_TARGET  = "<c:get select="$topology/environment[@default='true']/@name" />";

	public static boolean quiesce = false;

    private static Config config = null;
    static List<String> TARGETS = Arrays.asList(new String[] {<c:iterate select="$topology/environment" var="environment" delimiter=", ">"<c:get select="$environment/@name" />"</c:iterate>});

    private static <c:get select="$topology/@iLoggerJava" /> log = <c:get select="$topology/@loggerJava" />.getInstance();
    
    private static ILocalCluster localCluster = new LocalCluster();

    public static void main(String[] args) throws Exception {

			<c:userRegion>// Begin topology execution code<c:initialCode>

    	String target = DEFAULT_TARGET;
    	
    	for (int i = 0; i < args.length; i++) {
    		System.out.println("args["+i+"] = "+args[i]);
    	}
     
    	if (args.length > 0 && TARGETS.contains(args[0])) {
    		target = args[0];
        } else if (args.length > 0) {
        	System.out.println("Invalid target environment specified");
        	return;
        }

        config = loadConfig(target);
       	
        if ("true".equals(config.get("backlog.monitor.enabled").toString())) {
            List<String> hooksList= new ArrayList<String>();
            hooksList.add(TaskHook.class.getName());
            config.put(Config.TOPOLOGY_AUTO_TASK_HOOKS, hooksList);
        }
        
       	if (isRunLocally()) {
       		submitTopologyLocal();
       	} else {
       		submitTopology();
       	}
       	
			</c:initialCode>// End topology execution code</c:userRegion>

    }
    
    public static void submitTopology() {
    
    	StormTopology topology = createTopology();
       	String topologyName = config.get("topology.name").toString();

       	try {
			StormSubmitter.submitTopology(topologyName, config, topology);
		} catch (AlreadyAliveException e) {
			log.severe("<c:get select="$topology/@topologyJava" />","submitToplogy","Topology was already alive: "+e);
		} catch (InvalidTopologyException e) {
			log.severe("<c:get select="$topology/@topologyJava" />","submitToplogy","Invalid topology: "+e);
		}

    }
    
    public static void submitTopologyLocal() {
    
    	StormTopology topology = createTopology();
       	String topologyName = config.get("topology.name").toString();

		try {
			getLocalCluster().submitTopology(topologyName, config, topology);
			
			int sleepMinutes;
			try {
				sleepMinutes = ((Integer) config.get("sleep.after.submit.minutes")).intValue();
			} catch (NumberFormatException e) {
				sleepMinutes = 1;
			}
			new AlarmClock(sleepMinutes * 60000,5*60000).go();
			
			getLocalCluster().killTopology(topologyName);
			getLocalCluster().shutdown();
		} catch (AlreadyAliveException e) {
			log.severe("<c:get select="$topology/@topologyJava" />","submitTopologyLocal","Topology was already alive: "+e);
		} catch (InvalidTopologyException e) {
			log.severe("<c:get select="$topology/@topologyJava" />","submitTopologyLocal","Invalid topology: "+e);
		} catch (NotAliveException e) {
			log.severe("<c:get select="$topology/@topologyJava" />","submitTopologyLocal","Topology is not yet alive: "+e);
		}

    }

    public static Config loadConfig(String env) {
        log.fine("<c:get select="$topology/@topologyJava" />","submitToplogy","Initializing " + env + " topology");
        Properties props = new Properties();
        Config config = new Config();
        try {
            props.load(<c:get select="$topology/@topologyJava" />.class.getResourceAsStream("/" + env + ".properties"));
           for (Object prop : props.keySet()) {
				Object value = props.get(prop);
				try {
					// see if it's an Integer
					int intValue = Integer.parseInt(String.valueOf(value));
					config.put(prop.toString(), intValue);
				} catch (NumberFormatException e) {
					config.put(prop.toString(), value);					
				}
				
				log.fine("<c:get select="$topology/@topologyJava" />","submitToplogy",prop.toString() + "=" + value);
			}
            config.put(Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION, true);
        } catch(IOException e) {
            e.printStackTrace();
        }
        return config;
    }

    public static StormTopology createTopology() {

        TopologyBuilder builder = new TopologyBuilder();
		BoltDeclarer boltDeclarer;
		
		int parallelismHint = 0;
<c:iterate select="$topology/*[@isComponent='true']" var="component">

<c:if test="$component/@componentKind='spout'">
        parallelismHint = (Integer)config.get("<c:get select="$component/@name" />.parallelismHint");
        builder.setSpout("<c:get select="$component/@name" />", new <c:get select="$component/@spoutJava" />(), parallelismHint);
</c:if>
<c:if test="$component/@componentKind='bolt'">
        parallelismHint = (Integer)config.get("<c:get select="$component/@name" />.parallelismHint");
        boltDeclarer = builder.setBolt("<c:get select="$component/@name" />", new <c:get select="$component/@boltJava" />(), parallelismHint);
<c:iterate select="$component/execs" var="execs">
<c:setVariable select="$topology/*/emits[@stream=$reads/@stream]" var="emits" />
<c:choose select="$reads/@grouping" >
<c:when test=" 'all' ">
        boltDeclarer.allGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />");
</c:when>
<c:when test=" 'fields' ">
        boltDeclarer.fieldsGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />",new Fields(<c:iterate select="$reads/fieldRef" var="fieldRef" delimiter=", ">"<c:get select="$fieldRef/@name" />"</c:iterate>));
</c:when>
<c:when test=" 'global' ">
        boltDeclarer.globalGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />");
</c:when>
<c:when test=" 'none' ">
        boltDeclarer.noneGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />");
</c:when>
<c:when test=" 'shuffle' ">
        boltDeclarer.shuffleGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />");
</c:when>
<c:when test=" 'local' ">
        boltDeclarer.localOrShuffleGrouping("<c:get select="$emits/../@name" />","<c:get select="$reads/@stream" />");
</c:when>
</c:choose>
</c:iterate>
</c:if>
</c:iterate>

        return builder.createTopology();
    }
    
    public static <c:get select="$topology/@iLoggerJava" /> getLogger() {
    	return log;
    }
    
    private static ILocalCluster getLocalCluster() {
    	return localCluster;
    }
    
    public static void setLocalCluster(ILocalCluster cluster) {
    	localCluster = cluster;
    }
    
    public static boolean isRunLocally() {
        return Boolean.parseBoolean(config.get("topology.run.locally").toString());
    }

	<c:userRegion>// Begin custom methods<c:initialCode>
	
	
	
	</c:initialCode>// End custom methods</c:userRegion>

}
