package <c:get select="$topology/@utilPkg" />;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import backtype.storm.Config;
import backtype.storm.hooks.ITaskHook;
import backtype.storm.hooks.info.BoltAckInfo;
import backtype.storm.hooks.info.BoltExecuteInfo;
import backtype.storm.hooks.info.BoltFailInfo;
import backtype.storm.hooks.info.EmitInfo;
import backtype.storm.hooks.info.SpoutAckInfo;
import backtype.storm.hooks.info.SpoutFailInfo;
import backtype.storm.task.TopologyContext;

import com.gerken.monitor.MonitorServer;

public class TaskHook implements ITaskHook {

	private static HashMap<String, Integer> backlog = new HashMap<String, Integer>();
	private static HashSet<String> streams = new HashSet<String>();
	private static ArrayList<String> streamOrder = new ArrayList<String>();
	private static long timeBucketBegin = 0;
	private static long timeBucketSize = 1000;
	private static long firstBegin = 0;

	private static MonitorServer monitor = new MonitorServer(8087);
	
	private boolean enabled = false;
	
	public TaskHook() {

	}

	@Override
	public void prepare(Map conf, TopologyContext context) {
		String id = context.getThisComponentId();

		if (id.startsWith("__")) { return; }
		
//		Set<String> outputs = context.getComponentStreams(id);
//		for (String out : outputs) {
//			System.out.println("\t o: "+out);
//		}
//		Map<GlobalStreamId, Grouping> inputs = context.getSources(id);
//		for (GlobalStreamId gsi : inputs.keySet()) {
//			System.out.println("\t 1: "+gsi.get_componentId()+" via "+gsi.get_streamId());
//		}

		enabled = true;
	}

	@Override
	public void cleanup() {
		
	}

	@Override
	public void emit(EmitInfo info) {
		if (!enabled) { return; }
		String stream = info.stream;
		incrementTuples(stream,info.outTasks.size());
	}

	private static void incrementTuples(String stream, int increase) {
		synchronized (backlog) {
			if (!streams.contains(stream)) {
				streams.add(stream);
				streamOrder.add(stream);
			}
			Integer count = backlog.get(stream);
			if (count == null) {
				count = new Integer(0);
			}
			count = count + increase;
			backlog.put(stream, count);
			write();
		}
	}

	private static void decrementTuples(String stream) {
		synchronized (backlog) {
			if (!streams.contains(stream)) {
				streams.add(stream);
				streamOrder.add(stream);
			}
			Integer count = backlog.get(stream);
			if (count == null) {
				count = new Integer(0);
			}
			count = count - 1;
			backlog.put(stream, count);
			write();
		}
	}

	private static void write() {
		long now = System.currentTimeMillis();
		if (now < (timeBucketBegin+timeBucketSize)) {
			return;
		}
		if (timeBucketBegin == 0) {
			timeBucketBegin = (now / timeBucketSize) * timeBucketSize;
			firstBegin = timeBucketBegin;
			monitor.series(now,timeBucketSize);
			return;
		}
		
		while (now > timeBucketBegin) {
			long t = (timeBucketBegin-firstBegin) / timeBucketSize;
			Iterator<String> names = streamOrder.iterator();
			while (names.hasNext()) {
				String stream = names.next();
				long count = backlog.get(stream);
				monitor.set(stream, t, count);
			}
			timeBucketBegin = timeBucketBegin + timeBucketSize;
		}
		
		timeBucketBegin = now;
	}

	@Override
	public void spoutAck(SpoutAckInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void spoutFail(SpoutFailInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void boltExecute(BoltExecuteInfo info) {
		if (!enabled) { return; }
		String stream = info.tuple.getSourceStreamId();
		decrementTuples(stream);
	}

	@Override
	public void boltAck(BoltAckInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void boltFail(BoltFailInfo info) {
		// TODO Auto-generated method stub

	}

	public static void registerTo(Config newConfig) {
        if ("true".equals(newConfig.get("storm.monitor.enabled").toString())) {
            List<String> hooksList= new ArrayList<String>();
            hooksList.add(TaskHook.class.getName());
            newConfig.put(Config.TOPOLOGY_AUTO_TASK_HOOKS, hooksList);
        }
	}

}
