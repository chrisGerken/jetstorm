package <c:get select="$topology/@utilPkg" />;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import backtype.storm.hooks.ITaskHook;
import backtype.storm.hooks.info.BoltAckInfo;
import backtype.storm.hooks.info.BoltExecuteInfo;
import backtype.storm.hooks.info.BoltFailInfo;
import backtype.storm.hooks.info.EmitInfo;
import backtype.storm.hooks.info.SpoutAckInfo;
import backtype.storm.hooks.info.SpoutFailInfo;
import backtype.storm.task.TopologyContext;

public class <c:get select="$topology/@taskHookJava" /> implements ITaskHook {

	private static HashMap<String, Integer> backlog = new HashMap<String, Integer>();
	private static HashSet<String> streams = new HashSet<String>();
	private static ArrayList<String> streamOrder = new ArrayList<String>();
	private static long timeBucketBegin = 0;
	private static long timeBucketSize = 1000;
	private static long firstBegin = 0;
	private static String backlogFileName = "/home/chrisgerken/sofaBacklog.csv";
	
	public <c:get select="$topology/@taskHookJava" />() {

<c:iterate select="$topology/*/emits" var="emits" >
		touchTuples("<c:get select="$emits/@stream" />");
</c:iterate>

	}

	@Override
	public void prepare(Map conf, TopologyContext context) {
		
	}

	@Override
	public void cleanup() {

	}

	@Override
	public void emit(EmitInfo info) {
		String stream = info.stream;
		incrementTuples(stream);
	}

	private static void touchTuples(String stream) {
		synchronized (backlog) {
			if (!streams.contains(stream)) {
				streams.add(stream);
				streamOrder.add(stream);
			}
			Integer count = backlog.get(stream);
			if (count == null) {
				count = new Integer(0);
			}
			backlog.put(stream, count);
		}
	}

	private static void incrementTuples(String stream) {
		synchronized (backlog) {
			if (!streams.contains(stream)) {
				streams.add(stream);
				streamOrder.add(stream);
			}
			Integer count = backlog.get(stream);
			if (count == null) {
				count = new Integer(0);
			}
			count = count + 1;
			backlog.put(stream, count);
			write();
		}
	}

	private static void decrementTuples(String stream) {
		synchronized (backlog) {
			if (!streams.contains(stream)) {
				streams.add(stream);
				streamOrder.add(stream);
			}
			Integer count = backlog.get(stream);
			if (count == null) {
				count = new Integer(0);
			}
			count = count - 1;
			backlog.put(stream, count);
			write();
		}
	}

	private static void write() {
		long now = System.currentTimeMillis();
		if (now < (timeBucketBegin+timeBucketSize)) {
			return;
		}
		if (timeBucketBegin == 0) {
			timeBucketBegin = (now / timeBucketSize) * timeBucketSize;
			firstBegin = timeBucketBegin;
			StringBuffer sb = new StringBuffer();
			sb.append("Time");
			Iterator<String> names = streamOrder.iterator();
			while (names.hasNext()) {
				sb.append(" ,"+names.next());
			}
			try {
				FileWriter fw = new FileWriter(backlogFileName,false);
				fw.write(sb.toString()+"\n");
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return;
		}
		
		while (now > timeBucketBegin) {
			Iterator<String> names = streamOrder.iterator();
			StringBuffer sb = new StringBuffer();
			sb.append(String.valueOf(timeBucketBegin-firstBegin));
			while (names.hasNext()) {
				sb.append(" ,"+backlog.get(names.next()));
			}
			try {
				FileWriter fw = new FileWriter(backlogFileName,true);
				fw.write(sb.toString()+"\n");
				fw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			timeBucketBegin = timeBucketBegin + timeBucketSize;
		}
		
		timeBucketBegin = now;
	}

	@Override
	public void spoutAck(SpoutAckInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void spoutFail(SpoutFailInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void boltExecute(BoltExecuteInfo info) {
		String stream = info.tuple.getSourceStreamId();
		decrementTuples(stream);
	}

	@Override
	public void boltAck(BoltAckInfo info) {
		// TODO Auto-generated method stub

	}

	@Override
	public void boltFail(BoltFailInfo info) {
		// TODO Auto-generated method stub

	}

}
